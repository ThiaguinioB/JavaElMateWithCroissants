# üè¢ Docker Compose para Plataforma Completa de Horusec
#
# Este archivo define toda la infraestructura necesaria para ejecutar
# la plataforma completa de Horusec con interfaz web, ideal para:
# - Desarrollo local con interfaz gr√°fica
# - An√°lisis detallado de vulnerabilidades
# - Gesti√≥n de proyectos y equipos
# - Configuraci√≥n avanzada de reglas de seguridad
#
# Componentes incluidos:
# - PostgreSQL: Base de datos principal
# - RabbitMQ: Sistema de mensajer√≠a
# - Horusec Auth: Servicio de autenticaci√≥n
# - Horusec API: API principal 
# - Horusec Core: Motor de an√°lisis
# - Horusec Manager: Interfaz web
#
# Uso: docker-compose -f docker-compose.horusec-platform.yml up -d
# Acceso: http://localhost:8043 (usuario: dev, password: Devpass0*)

services:
  # üóÑÔ∏è Base de datos PostgreSQL
  postgres:
    image: postgres:12-alpine # Versi√≥n estable y ligera
    environment:
      # üîê Configuraci√≥n de base de datos (usar variables de entorno en producci√≥n)
      POSTGRES_USER: ${POSTGRES_USER:-horusec}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-horusec}
      POSTGRES_DB: ${POSTGRES_DB:-horusec_db}
    ports:
      - "5432:5432" # Puerto expuesto para acceso externo
    volumes:
      - pgdata:/var/lib/postgresql/data # Volumen persistente para datos
      # Ya NO montamos init-databases.sql porque no es necesario
    healthcheck:
      # ‚úÖ Verificaci√≥n de salud de PostgreSQL
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s # Verificar cada 5 segundos
      timeout: 5s # Timeout de 5 segundos
      retries: 20 # M√°ximo 20 reintentos
    restart: unless-stopped # Reiniciar autom√°ticamente excepto parada manual

  # üê∞ Sistema de mensajer√≠a RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management # Versi√≥n con interfaz de administraci√≥n
    ports:
      - "5672:5672" # Puerto AMQP para mensajer√≠a
      - "15672:15672" # Puerto web de administraci√≥n
    healthcheck:
      # ‚úÖ Verificaci√≥n de salud de RabbitMQ
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  # üîê Servicio de Autenticaci√≥n de Horusec
  horusec-auth:
    image: horuszup/horusec-auth:${HORUSEC_TAG:-v2.17.3}
    environment:
      # üîó Conexi√≥n a base de datos
      HORUSEC_DATABASE_SQL_URI: postgresql://${POSTGRES_USER:-horusec}:${POSTGRES_PASSWORD:-horusec}@postgres:5432/${POSTGRES_DB:-horusec_db}?sslmode=disable

      # üîë Configuraci√≥n JWT para autenticaci√≥n
      HORUSEC_JWT_SECRET: ${HORUSEC_JWT_SECRET}

      # üåê URL del Manager para redirecciones
      HORUSEC_MANAGER_URL: ${HORUSEC_MANAGER_URL:-http://localhost:8043}

      # üë§ Usuario por defecto para desarrollo
      HORUSEC_ENABLE_DEFAULT_USER: "true"
      HORUSEC_DEFAULT_USER_DATA: '{"username":"dev","email":"dev@example.com","password":"Devpass0*"}'
    depends_on:
      postgres:
        condition: service_healthy # Esperar a que PostgreSQL est√© listo
    ports:
      - "8006:8006" # Puerto HTTP del servicio auth
      - "8007:8007" # Puerto gRPC del servicio auth
    restart: unless-stopped

  # üîå API Principal de Horusec
  horusec-api:
    image: horuszup/horusec-api:${HORUSEC_TAG:-v2.17.3}
    environment:
      # üîó Configuraciones de conexi√≥n
      HORUSEC_DATABASE_SQL_URI: postgresql://${POSTGRES_USER:-horusec}:${POSTGRES_PASSWORD:-horusec}@postgres:5432/${POSTGRES_DB:-horusec_db}?sslmode=disable
      HORUSEC_GRPC_AUTH_URL: horusec-auth:8007 # Conexi√≥n gRPC con Auth

      # üê∞ Configuraci√≥n de RabbitMQ
      HORUSEC_BROKER_HOST: rabbitmq
      HORUSEC_BROKER_PORT: "5672"
      HORUSEC_BROKER_USERNAME: guest
      HORUSEC_BROKER_PASSWORD: guest

      # üåê Puerto de la API
      HORUSEC_PORT: "8000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      horusec-auth:
        condition: service_started
    ports:
      - "8000:8000" # Puerto HTTP de la API
    restart: unless-stopped

  # ‚öôÔ∏è Motor de An√°lisis de Horusec
  horusec-core:
    image: horuszup/horusec-core:${HORUSEC_TAG:-v2.17.3}
    environment:
      # üê∞ Configuraci√≥n de RabbitMQ para procesamiento de an√°lisis
      HORUSEC_BROKER_HOST: rabbitmq
      HORUSEC_BROKER_PORT: "5672"

      # üîê Conexi√≥n con servicio de autenticaci√≥n
      HORUSEC_GRPC_AUTH_URL: horusec-auth:8007

      # üåê URL del Manager
      HORUSEC_MANAGER_URL: ${HORUSEC_MANAGER_URL:-http://localhost:8043}
    depends_on:
      rabbitmq:
        condition: service_healthy
      horusec-auth:
        condition: service_started
    restart: unless-stopped
    # Nota: Este servicio no expone puertos ya que funciona como worker interno

    # üñ•Ô∏è Interfaz Web de Horusec (Manager)
  horusec-manager:
    image: horuszup/horusec-manager:${HORUSEC_TAG:-v2.17.3}
    environment:
      # üîó URL de la API (debe estar escapada para configuraci√≥n interna)
      HORUSEC_API_URI: "http:\\/\\/horusec-api:8000"
    depends_on:
      horusec-api:
        condition: service_started
    ports:
      - "8043:8043" # Puerto web principal - ACCESO: http://localhost:8043
    restart: unless-stopped

# üíæ Vol√∫menes persistentes
volumes:
  pgdata: # Volumen para datos de PostgreSQL
